import { createSlice } from '@reduxjs/toolkit';

// Initial state for Week 1 challenges
// Each day (day1 to day7) is initialized with a value of 'false', indicating that no day is completed at the start.
const initialState = {
  day1: false,
  day2: false,
  day3: false,
  day4: false,
  day5: false,
  day6: false,
  day7: false,
};

// Creates a slice of the Redux state for managing the completion of Week 1 challenges
// This slice contains an initial state and two reducers (completeDay and resetWeek)
const week1Slice = createSlice({
  name: 'week1', // Name of the slice (used internally by Redux)
  initialState,  // The initial state for this slice (Week 1 days set to false)
  
  // Reducers to handle updating the state based on dispatched actions
  reducers: {

    // completeDay reducer: Marks a specific day as complete (true)
    // Payload contains the day (e.g., 'day1') that is being completed
    completeDay: (state, action) => {
      const { day } = action.payload;  // Extract day from the action payload
      if (state.hasOwnProperty(day)) { // Check if the provided day exists in the state
        state[day] = true;             // Mark the day as complete (set to true)
      }
    },

    // resetWeek reducer: Resets all days to false (i.e., incomplete)
    // This is useful if you need to start the week over or reset progress
    resetWeek: (state) => {
      // Iterate over each key in the state (each day) and set the value to false
      Object.keys(state).forEach((key) => {
        state[key] = false;            // Reset all days to incomplete
      });
    },
  },
});

// Export actions generated by createSlice so they can be dispatched from components
// completeDay: Dispatch this action to mark a specific day as complete
// resetWeek: Dispatch this action to reset all days to incomplete
export const { completeDay, resetWeek } = week1Slice.actions;

// Export the reducer function to be used in the Redux store configuration
export default week1Slice.reducer;